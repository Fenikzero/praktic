from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Підключення до бази даних SQLite
DATABASE_URL = "sqlite:///./library.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Модель таблиці "Книги"
class Book(Base):
    __tablename__ = "books"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    author = Column(String, index=True)
    year = Column(Integer)
    isbn = Column(String, unique=True, index=True)

# Створення таблиці в БД
Base.metadata.create_all(bind=engine)

# Ініціалізація FastAPI
app = FastAPI()

# Модель для запитів на додавання книги
class BookCreate(BaseModel):
    title: str
    author: str
    year: int
    isbn: str

# Отримання всіх книг
@app.get("/books/")
def get_books():
    db = SessionLocal()
    books = db.query(Book).all()
    db.close()
    return books

# Додавання нової книги
@app.post("/books/")
def create_book(book: BookCreate):
    db = SessionLocal()
    
    # Перевірка, чи існує ISBN
    existing_book = db.query(Book).filter(Book.isbn == book.isbn).first()
    if existing_book:
        db.close()
        raise HTTPException(status_code=400, detail="Книга з таким ISBN вже існує!")

    new_book = Book(title=book.title, author=book.author, year=book.year, isbn=book.isbn)
    db.add(new_book)
    db.commit()
    db.refresh(new_book)
    db.close()
    return new_book

# Отримання книги за ID
@app.get("/books/{book_id}")
def get_book(book_id: int):
    db = SessionLocal()
    book = db.query(Book).filter(Book.id == book_id).first()
    db.close()
    if book is None:
        raise HTTPException(status_code=404, detail="Книгу не знайдено")
    return book

# Видалення книги за ID
@app.delete("/books/{book_id}")
def delete_book(book_id: int):
    db = SessionLocal()
    book = db.query(Book).filter(Book.id == book_id).first()
    if book is None:
        db.close()
        raise HTTPException(status_code=404, detail="Книгу не знайдено")
    
    db.delete(book)
    db.commit()
    db.close()
    return {"message": "Книгу успішно видалено!"}

from contextlib import contextmanager

@contextmanager
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Приклад використання get_db
@app.get("/books/")
def get_books():
    with get_db() as db:
        books = db.query(Book).all()
    return books

from pydantic import BaseModel

class BookResponse(BaseModel):
    id: int
    title: str
    author: str
    year: int
    isbn: str

    class Config:
        orm_mode = True

from fastapi import Depends

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

